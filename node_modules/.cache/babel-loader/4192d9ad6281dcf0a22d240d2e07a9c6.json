{"ast":null,"code":"var _jsxFileName = \"/home/akshit/PlanetX/planetx/src/components/Earth.js\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport NavBar from \"./NavBar\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api_key = process.env.REACT_APP_NASA_KEY;\nconst ePhotoAPI = 'https://api.nasa.gov/EPIC/api/natural/images?api_key=';\n\nclass Earth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      earthPic: [],\n      earthDate: [],\n      imageCaption: [],\n      imageLat: [],\n      imageLong: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(ePhotoAPI).then(response => response.json()).then(response => {\n      this.setState({\n        earthPic: response[0].image,\n        earthDate: response[0].date,\n        imageCaption: response[0].caption,\n        imageLat: response[0].centroid_coordinates.lat,\n        imageLong: response[0].centroid_coordinates.lon\n      });\n    });\n  }\n\n  render() {\n    const {\n      earthPic,\n      earthDate,\n      imageCaption,\n      imageLat,\n      imageLong\n    } = this.state;\n    console.log(earthDate, earthPic, imageCaption, imageLat, imageLong);\n    const date = earthDate;\n    const month = moment(date).format('MM');\n    const day = moment(date).format('DD');\n    const year = moment(date).format('YYYY');\n    console.log(month, day, year);\n    const lat = imageLat;\n    const long = imageLong;\n    const image = `https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/png/${this.state.earthPic}.png`;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: image,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Earth from DSCOVR's Earth Polychromatic Imaging Camera (EPIC) instrument.\",\n          src: image,\n          className: \"earth-photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"desText\",\n        children: [this.state.imageCaption, \" on \", month, \"/\", day, \"/\", year, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"desText\",\n        children: [\"Geographical coordinates that the satellite is looking at:  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 96\n        }, this), \"Longitude: \", lat, \" || Latitude: \", long]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Earth;","map":{"version":3,"names":["React","Component","NavBar","moment","api_key","process","env","REACT_APP_NASA_KEY","ePhotoAPI","Earth","constructor","props","state","earthPic","earthDate","imageCaption","imageLat","imageLong","componentDidMount","fetch","then","response","json","setState","image","date","caption","centroid_coordinates","lat","lon","render","console","log","month","format","day","year","long"],"sources":["/home/akshit/PlanetX/planetx/src/components/Earth.js"],"sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\nimport NavBar from \"./NavBar\";\nimport moment from 'moment'; \n\nconst api_key = process.env.REACT_APP_NASA_KEY;\n\nconst ePhotoAPI = 'https://api.nasa.gov/EPIC/api/natural/images?api_key='\n\nclass Earth extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n          earthPic: [],\n          earthDate: [],\n          imageCaption: [],\n          imageLat: [],\n          imageLong: []\n        };\n    }\n  \n    componentDidMount() {  \n        fetch(ePhotoAPI)\n            .then(response => response.json())\n            .then(response => {\n                this.setState({\n                  earthPic:response[0].image,\n                  earthDate:response[0].date,\n                  imageCaption:response[0].caption,\n                  imageLat:response[0].centroid_coordinates.lat,\n                  imageLong:response[0].centroid_coordinates.lon    \n                })\n            })\n            \n    }\n  \n    render() {\n      const {earthPic, earthDate, imageCaption, imageLat, imageLong} = this.state;\n      console.log(earthDate, earthPic, imageCaption, imageLat, imageLong)\n      const date= earthDate\n      const month= moment(date).format('MM')\n      const day= moment(date).format('DD')\n      const year=moment(date).format('YYYY')\n      console.log(month,day,year)\n  \n  const lat = imageLat;\n  const long = imageLong;\n  \n  const image= `https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/png/${this.state.earthPic}.png`\n  \n      return (\n        <>\n        <NavBar />\n        <br/>\n          <a href={image}>\n            <img  alt=\"Earth from DSCOVR's Earth Polychromatic Imaging Camera (EPIC) instrument.\" src={image} className=\"earth-photo\"/>\n            </a>\n            <p className='desText'>{this.state.imageCaption} on {month}/{day}/{year}.</p>\n            <p className='desText'>Geographical coordinates that the satellite is looking at:  <br></br>Longitude: {lat} || Latitude: {long}</p>\n            <br></br>\n            <br></br>\n            <br></br>  \n        </>\n      );\n    }; \n  }\nexport default Earth;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}