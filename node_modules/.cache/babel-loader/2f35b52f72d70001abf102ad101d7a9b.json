{"ast":null,"code":"var _jsxFileName = \"/home/akshit/PlanetX/planetx/src/components/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport { formatDate } from \"./helpers\";\nimport WeatherData from './WeatherData';\nimport Info from './Info';\nimport Unit from './Unit';\nimport Previous from './Previous'; // import {\n//     AppWrapper,\n//     GlobalStyle,\n//     MarsWeather,\n//     InfoWrapper,\n// } from './App.styles';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.nasa.gov/insight_weather/?api_key=dU4xiSzgyU4avLWCySOgPWJaOzhXFul8GQV6EYau&feedtype=json&ver=1.0';\nexport default function Weather() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectedSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n  useEffect(() => {\n    const fetchFromAPI = async () => {\n      const weather = await (await fetch(API_URL)).json();\n      const marsWeather = weather.sol_keys.map(solKey => {\n        var _weather$solKey$AT, _weather$solKey$AT2, _weather$solKey$HWS, _weather$solKey$WD, _weather$solKey$WD$mo;\n\n        return {\n          sol: solKey,\n          maxTemp: ((_weather$solKey$AT = weather[solKey].AT) === null || _weather$solKey$AT === void 0 ? void 0 : _weather$solKey$AT.mx) || 'No data',\n          minTemp: ((_weather$solKey$AT2 = weather[solKey].AT) === null || _weather$solKey$AT2 === void 0 ? void 0 : _weather$solKey$AT2.mn) || 'No data',\n          windSpeed: Math.round(((_weather$solKey$HWS = weather[solKey].HWS) === null || _weather$solKey$HWS === void 0 ? void 0 : _weather$solKey$HWS.av) || 0),\n          windDirectionDegrees: ((_weather$solKey$WD = weather[solKey].WD) === null || _weather$solKey$WD === void 0 ? void 0 : (_weather$solKey$WD$mo = _weather$solKey$WD.most_common) === null || _weather$solKey$WD$mo === void 0 ? void 0 : _weather$solKey$WD$mo.compass_degrees) || 0,\n          date: formatDate(new Date(weather[solKey].First_UTC))\n        };\n      });\n      setWeather(marsWeather);\n      setSelectedSol(marsWeather.length - 1);\n      setLoading(false);\n    };\n\n    fetchFromAPI();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Weather, \"z/RqbhbOx6AeyyvObnxTsprweL4=\");\n\n_c = Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","NavBar","formatDate","WeatherData","Info","Unit","Previous","API_URL","Weather","loading","setLoading","useState","weather","setWeather","selectedSol","setSelectedSol","metric","setMetric","previous","setPrevious","console","log","fetchFromAPI","fetch","json","marsWeather","sol_keys","map","solKey","sol","maxTemp","AT","mx","minTemp","mn","windSpeed","Math","round","HWS","av","windDirectionDegrees","WD","most_common","compass_degrees","date","Date","First_UTC","length"],"sources":["/home/akshit/PlanetX/planetx/src/components/Weather.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport { formatDate  } from \"./helpers\";\nimport WeatherData from './WeatherData';\nimport Info from './Info';\nimport Unit from './Unit';\nimport Previous from './Previous';\n\n// import {\n//     AppWrapper,\n//     GlobalStyle,\n//     MarsWeather,\n//     InfoWrapper,\n// } from './App.styles';\n\nconst API_URL = 'https://api.nasa.gov/insight_weather/?api_key=dU4xiSzgyU4avLWCySOgPWJaOzhXFul8GQV6EYau&feedtype=json&ver=1.0'\n\nexport default function Weather() {\n    const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectedSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n  \n  useEffect(() => {\n    const fetchFromAPI = async () => {\n        const weather = await (await fetch(API_URL)).json();\n        const marsWeather = weather.sol_keys.map((solKey) => {\n            return {\n                sol: solKey,\n                maxTemp: weather[solKey].AT?.mx || 'No data',\n                minTemp: weather[solKey].AT?.mn || 'No data',\n                windSpeed: Math.round(weather[solKey].HWS?.av || 0),\n                windDirectionDegrees:\n                  weather[solKey].WD?.most_common?.compass_degrees || 0,\n                date: formatDate(new Date(weather[solKey].First_UTC)),\n              };\n            });\n            setWeather(marsWeather);\n            setSelectedSol(marsWeather.length - 1);\n            setLoading(false);\n          };\n      \n          fetchFromAPI();\n        }, []);\n    return (\n        <>\n        <NavBar />\n        <div className=\"heading\">\n            <h1>Weather</h1> \n        </div>\n        </>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,QAA4B,WAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,OAAO,GAAG,8GAAhB;AAEA,eAAe,SAASC,OAAT,GAAmB;EAAA;;EAC9B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,IAAD,CAAtC;EACF,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBF,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,EAA9C;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;EACA,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;EACAS,OAAO,CAACC,GAAR,CAAYT,OAAZ;EAEAZ,SAAS,CAAC,MAAM;IACd,MAAMsB,YAAY,GAAG,YAAY;MAC7B,MAAMV,OAAO,GAAG,MAAM,CAAC,MAAMW,KAAK,CAAChB,OAAD,CAAZ,EAAuBiB,IAAvB,EAAtB;MACA,MAAMC,WAAW,GAAGb,OAAO,CAACc,QAAR,CAAiBC,GAAjB,CAAsBC,MAAD,IAAY;QAAA;;QACjD,OAAO;UACHC,GAAG,EAAED,MADF;UAEHE,OAAO,EAAE,uBAAAlB,OAAO,CAACgB,MAAD,CAAP,CAAgBG,EAAhB,0EAAoBC,EAApB,KAA0B,SAFhC;UAGHC,OAAO,EAAE,wBAAArB,OAAO,CAACgB,MAAD,CAAP,CAAgBG,EAAhB,4EAAoBG,EAApB,KAA0B,SAHhC;UAIHC,SAAS,EAAEC,IAAI,CAACC,KAAL,CAAW,wBAAAzB,OAAO,CAACgB,MAAD,CAAP,CAAgBU,GAAhB,4EAAqBC,EAArB,KAA2B,CAAtC,CAJR;UAKHC,oBAAoB,EAClB,uBAAA5B,OAAO,CAACgB,MAAD,CAAP,CAAgBa,EAAhB,mGAAoBC,WAApB,gFAAiCC,eAAjC,KAAoD,CANnD;UAOHC,IAAI,EAAE1C,UAAU,CAAC,IAAI2C,IAAJ,CAASjC,OAAO,CAACgB,MAAD,CAAP,CAAgBkB,SAAzB,CAAD;QAPb,CAAP;MASC,CAVe,CAApB;MAWIjC,UAAU,CAACY,WAAD,CAAV;MACAV,cAAc,CAACU,WAAW,CAACsB,MAAZ,GAAqB,CAAtB,CAAd;MACArC,UAAU,CAAC,KAAD,CAAV;IACD,CAhBP;;IAkBMY,YAAY;EACb,CApBE,EAoBA,EApBA,CAAT;EAqBE,oBACI;IAAA,wBACA,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADA,eAEA;MAAK,SAAS,EAAC,SAAf;MAAA,uBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAFA;EAAA,gBADJ;AAQH;;GArCuBd,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}