{"ast":null,"code":"var _jsxFileName = \"/home/akshit/PlanetX/planetx/src/components/WildFire.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Map from './Map';\nimport Loader from './Loader';\nimport Header from './Header';\nimport NavBar from './NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WildFire() {\n  _s();\n\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false); // Use Async await here with fetch for the NASA API\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events'); // Destructure here to just pull targeted information we need, in this case, just events\n\n      const {\n        events\n      } = await res.json();\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchEvents(); // Add dependency array as 2nd argument below, it will be set as empty\n\n    console.log(eventData);\n  }, []); // Create a loading expression\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!loading ? /*#__PURE__*/_jsxDEV(Map, {\n      eventData: eventData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 52\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WildFire, \"U8rW6Qt8WbkVNNz2MQKPlyaASlw=\");\n\n_c = WildFire;\nexport default WildFire;\n\nvar _c;\n\n$RefreshReg$(_c, \"WildFire\");","map":{"version":3,"names":["useState","useEffect","Map","Loader","Header","NavBar","WildFire","eventData","setEventData","loading","setLoading","fetchEvents","res","fetch","events","json","console","log"],"sources":["/home/akshit/PlanetX/planetx/src/components/WildFire.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Map from './Map';\nimport Loader from './Loader';\nimport Header from './Header';\nimport NavBar from './NavBar';\n\nfunction WildFire() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n  \n  // Use Async await here with fetch for the NASA API\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      // Destructure here to just pull targeted information we need, in this case, just events\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false) \n\n    }\n\n    fetchEvents()\n    // Add dependency array as 2nd argument below, it will be set as empty\n\n    console.log(eventData);\n  }, [])\n\n// Create a loading expression\n  return (\n    <div>\n      { !loading ? <Map eventData={eventData} /> : <Loader /> }\n      <NavBar />\n    </div>\n  );\n}\n\nexport default WildFire"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,QAAT,GAAoB;EAAA;;EAClB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC,CAFkB,CAIlB;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAG,YAAY;MAC9BD,UAAU,CAAC,IAAD,CAAV;MACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,iDAAD,CAAvB,CAF8B,CAG9B;;MACA,MAAM;QAAEC;MAAF,IAAa,MAAMF,GAAG,CAACG,IAAJ,EAAzB;MAEAP,YAAY,CAACM,MAAD,CAAZ;MACAJ,UAAU,CAAC,KAAD,CAAV;IAED,CATD;;IAWAC,WAAW,GAZG,CAad;;IAEAK,OAAO,CAACC,GAAR,CAAYV,SAAZ;EACD,CAhBQ,EAgBN,EAhBM,CAAT,CALkB,CAuBpB;;EACE,oBACE;IAAA,WACI,CAACE,OAAD,gBAAW,QAAC,GAAD;MAAK,SAAS,EAAEF;IAAhB;MAAA;MAAA;MAAA;IAAA,QAAX,gBAA2C,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QAD/C,eAEE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA9BQD,Q;;KAAAA,Q;AAgCT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}