{"ast":null,"code":"var _jsxFileName = \"/home/akshit/PlanetX/planetx/src/components/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport NavBar from \"./NavBar\";\nimport { formatDate } from \"./helpers\";\nimport WeatherData from './WeatherData';\nimport Info from './Info';\nimport Unit from './Unit';\nimport Previous from './Previous';\nimport { AppWrapper, GlobalStyle, MarsWeather, InfoWrapper } from \"./Weather.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.nasa.gov/insight_weather/?api_key=dU4xiSzgyU4avLWCySOgPWJaOzhXFul8GQV6EYau&feedtype=json&ver=1.0';\n\nconst Weather = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectedSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n  useEffect(() => {\n    const fetchFromAPI = async () => {\n      const weather = await (await fetch(API_URL)).json();\n      console.log(weather);\n      const marsWeather = weather.sol_keys.map(solKey => {\n        var _weather$solKey$AT, _weather$solKey$AT2, _weather$solKey$HWS, _weather$solKey$WD, _weather$solKey$WD$mo;\n\n        return {\n          sol: solKey,\n          maxTemp: ((_weather$solKey$AT = weather[solKey].AT) === null || _weather$solKey$AT === void 0 ? void 0 : _weather$solKey$AT.mx) || 'No data',\n          minTemp: ((_weather$solKey$AT2 = weather[solKey].AT) === null || _weather$solKey$AT2 === void 0 ? void 0 : _weather$solKey$AT2.mn) || 'No data',\n          windSpeed: Math.round(((_weather$solKey$HWS = weather[solKey].HWS) === null || _weather$solKey$HWS === void 0 ? void 0 : _weather$solKey$HWS.av) || 0),\n          windDirectionDegrees: ((_weather$solKey$WD = weather[solKey].WD) === null || _weather$solKey$WD === void 0 ? void 0 : (_weather$solKey$WD$mo = _weather$solKey$WD.most_common) === null || _weather$solKey$WD$mo === void 0 ? void 0 : _weather$solKey$WD$mo.compass_degrees) || 0,\n          date: formatDate(new Date(weather[solKey].First_UTC))\n        };\n      });\n      setWeather(marsWeather);\n      setSelectedSol(marsWeather.length - 1);\n      setLoading(false);\n    };\n\n    fetchFromAPI();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AppWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MarsWeather, {\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"main-title\",\n            children: \"Latest weather at Elysium Plantitia\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(WeatherData, {\n            sol: weather[selectedSol],\n            isMetric: metric\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InfoWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Unit, {\n              metric: metric,\n              setMetric: setMetric\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Previous, {\n        weather: weather,\n        previous: previous,\n        setPrevious: setPrevious,\n        setSelectedSol: setSelectedSol,\n        isMetric: metric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Weather, \"z/RqbhbOx6AeyyvObnxTsprweL4=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","NavBar","formatDate","WeatherData","Info","Unit","Previous","AppWrapper","GlobalStyle","MarsWeather","InfoWrapper","API_URL","Weather","loading","setLoading","weather","setWeather","selectedSol","setSelectedSol","metric","setMetric","previous","setPrevious","console","log","fetchFromAPI","fetch","json","marsWeather","sol_keys","map","solKey","sol","maxTemp","AT","mx","minTemp","mn","windSpeed","Math","round","HWS","av","windDirectionDegrees","WD","most_common","compass_degrees","date","Date","First_UTC","length"],"sources":["/home/akshit/PlanetX/planetx/src/components/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport NavBar from \"./NavBar\";\nimport { formatDate  } from \"./helpers\";\nimport WeatherData from './WeatherData';\nimport Info from './Info';\nimport Unit from './Unit';\nimport Previous from './Previous';\n\nimport {\n    AppWrapper,\n    GlobalStyle,\n    MarsWeather,\n    InfoWrapper,\n} from \"./Weather.styles\";\n\nconst API_URL = 'https://api.nasa.gov/insight_weather/?api_key=dU4xiSzgyU4avLWCySOgPWJaOzhXFul8GQV6EYau&feedtype=json&ver=1.0'\n\nconst Weather = () => {\n    const [loading, setLoading] = useState(true);\n    const [weather, setWeather] = useState([]);\n    const [selectedSol, setSelectedSol] = useState();\n    const [metric, setMetric] = useState(true);\n    const [previous, setPrevious] = useState(false);\n    console.log(weather);\n  \n  useEffect(() => {\n    const fetchFromAPI = async () => {\n        const weather = await (await fetch(API_URL)).json();\n        console.log(weather);\n        const marsWeather = weather.sol_keys.map((solKey) => {\n            return {\n                sol: solKey,\n                maxTemp: weather[solKey].AT?.mx || 'No data',\n                minTemp: weather[solKey].AT?.mn || 'No data',\n                windSpeed: Math.round(weather[solKey].HWS?.av || 0),\n                windDirectionDegrees:\n                  weather[solKey].WD?.most_common?.compass_degrees || 0,\n                date: formatDate(new Date(weather[solKey].First_UTC)),\n              };\n            });\n            setWeather(marsWeather);\n            setSelectedSol(marsWeather.length - 1);\n            setLoading(false);\n          };\n      \n          fetchFromAPI();\n        }, []);\n\n    return (\n        <>\n        <NavBar />\n        <AppWrapper>\n        <MarsWeather>\n          {loading ? (\n            <div>Loading ...</div>\n          ) : (\n            <>\n              <h1 className='main-title'>\n                Latest weather at Elysium Plantitia\n              </h1>\n              <WeatherData sol={weather[selectedSol]} isMetric={metric} />\n              <InfoWrapper>\n                <Info />\n                <Unit metric={metric} setMetric={setMetric} />\n              </InfoWrapper>\n            </>\n          )}\n        </MarsWeather>\n        <Previous\n          weather={weather}\n          previous={previous}\n          setPrevious={setPrevious}\n          setSelectedSol={setSelectedSol}\n          isMetric={metric}\n        />\n      </AppWrapper>\n        </>\n    )\n}\n\nexport default Weather"],"mappings":"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"},"metadata":{},"sourceType":"module"}